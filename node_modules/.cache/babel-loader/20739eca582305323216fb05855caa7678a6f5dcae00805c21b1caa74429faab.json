{"ast":null,"code":"import{useEffect,useState}from'react';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[message,setMessage]=useState('Loading...');useEffect(()=>{fetch('https://echoguest-backend.onrender.com/api/health').then(res=>res.json()).then(data=>setMessage(data.message||'No message')).catch(err=>setMessage('Failed to connect to backend'));},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Backend Connection Test\"}),/*#__PURE__*/_jsx(\"p\",{children:message})]});}export default App;","map":{"version":3,"names":["useEffect","useState","jsx","_jsx","jsxs","_jsxs","App","message","setMessage","fetch","then","res","json","data","catch","err","className","children"],"sources":["/data/data/com.termux/files/home/echoguest-final/client/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [message, setMessage] = useState('Loading...');\n\n  useEffect(() => {\n    fetch('https://echoguest-backend.onrender.com/api/health')\n      .then((res) => res.json())\n      .then((data) => setMessage(data.message || 'No message'))\n      .catch((err) => setMessage('Failed to connect to backend'));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Backend Connection Test</h1>\n      <p>{message}</p>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,MAAO,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnB,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGP,QAAQ,CAAC,YAAY,CAAC,CAEpDD,SAAS,CAAC,IAAM,CACdS,KAAK,CAAC,mDAAmD,CAAC,CACvDC,IAAI,CAAEC,GAAG,EAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,EAAKL,UAAU,CAACK,IAAI,CAACN,OAAO,EAAI,YAAY,CAAC,CAAC,CACxDO,KAAK,CAAEC,GAAG,EAAKP,UAAU,CAAC,8BAA8B,CAAC,CAAC,CAC/D,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEH,KAAA,QAAKW,SAAS,CAAC,KAAK,CAAAC,QAAA,eAClBd,IAAA,OAAAc,QAAA,CAAI,yBAAuB,CAAI,CAAC,cAChCd,IAAA,MAAAc,QAAA,CAAIV,OAAO,CAAI,CAAC,EACb,CAAC,CAEV,CAEA,cAAe,CAAAD,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}